from AlgorithmImports import *  # Import necessary libraries
from datetime import datetime  # Import datetime module for working with dates
import decimal  # Import decimal module for decimal arithmetic

class DualThrustAlgorithm:
    def __init__(self, algorithm):
        self.algorithm = algorithm

        # Set cash allocation for this strategy
        self.algorithm.SetCash(80000) # Total brokerage account balance !! ignored by live trading algo
        
        # Fixed investment amount per stock
        self.investment_amount_per_stock = 0.05 # amount of investment per stock

        # List of symbols to trade
        self.symbols = ["DELL", "MSFT", "AAPL", "AVGO", "NVDA"]

        # Initialize dictionaries to store trigger values and current open prices for each symbol
        self.selltrig = {}
        self.buytrig = {}
        self.currentopen = {}
        
        # Add securities and schedule events for each symbol
        for symbol in self.symbols:
            equity = self.algorithm.AddEquity(symbol, Resolution.MINUTE)
            self.selltrig[symbol] = 0.0  # Initialize sell trigger with a default value
            self.buytrig[symbol] = 0.0   # Initialize buy trigger with a default value
            self.currentopen[symbol] = 0.0  # Initialize current open price with a default value
            # self.algorithm.Schedule.On(self.algorithm.DateRules.EveryDay(symbol), self.algorithm.TimeRules.AfterMarketOpen(symbol, 0), lambda symbol=symbol: self.SetSignal(symbol))
    
    def SetSignal(self, symbol):  # Define the SetSignal method
        # Retrieve historical data
        history = self.algorithm.History([symbol], 4, Resolution.DAILY)
        
        # Set parameters
        k_parameter = 0.5  # Fixed k_parameter value
        k1 = k_parameter
        k2 = k_parameter
        high = history.loc[symbol]['high']  # High prices in historical data
        low = history.loc[symbol]['low']    # Low prices in historical data
        close = history.loc[symbol]['close']  # Close prices in historical data
        
        # Get current opening price
        self.currentopen[symbol] = self.algorithm.Portfolio[symbol].Price
        
        # Calculate thresholds
        HH, HC, LC, LL = max(high), max(close), min(close), min(low)  # Calculate HH, HC, LC, LL
        if HH - LC >= HC - LL:
            signalrange = HH - LC  # Calculate signal range
        else:
            signalrange = HC - LL
        
        self.selltrig[symbol] = float(self.currentopen[symbol]) - float(k1) * signalrange  # Calculate sell trigger
        self.buytrig[symbol] = float(self.currentopen[symbol]) + float(k2) * signalrange    # Calculate buy trigger
    
    def OnData(self, data):
        min_order_size = 2  # Set your minimum order size here
        for symbol in self.symbols:
            if self.selltrig[symbol] is None:
                continue
            holdings = self.algorithm.Portfolio[symbol].Quantity
            order_size = abs(self.algorithm.CalculateOrderQuantity(symbol, self.investment_amount_per_stock))
            if order_size < min_order_size:
                # self.algorithm.Debug(f"The calculated order size for {symbol} is less than the minimum order size. Skipping order.")
                continue
            if self.algorithm.Portfolio[symbol].Price >= self.selltrig[symbol]:
                if holdings >= 0:
                    self.algorithm.SetHoldings(symbol, self.investment_amount_per_stock)
                else:
                    self.algorithm.Liquidate(symbol)
                    self.algorithm.SetHoldings(symbol, self.investment_amount_per_stock)
            elif self.algorithm.Portfolio[symbol].Price < self.selltrig[symbol]:
                if holdings >= 0:
                    self.algorithm.Liquidate(symbol)
                    self.algorithm.SetHoldings(symbol, -self.investment_amount_per_stock)
                else:
                    self.algorithm.SetHoldings(symbol, -self.investment_amount_per_stock)
        
        # Log current open, buy, and sell thresholds for each symbol
        # for symbol in self.symbols:
            # self.algorithm.Log("open for " + symbol + ": " + str(self.currentopen[symbol]) + ", buy: " + str(self.buytrig[symbol]) + ", sell: " + str(self.selltrig[symbol]))
