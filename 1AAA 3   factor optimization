# region imports
from AlgorithmImports import *
from scipy import optimize
from scipy.optimize import Bounds
# endregion

class FactorWeightOptimizationAlgorithm(QCAlgorithm):
    def initialize(self):
        # Set the start date for the algorithm
        self.set_start_date(2024, 1, 1)
        # Set the starting cash for the portfolio
        self.set_cash(100000)
        # Set the percentage of the portfolio to trade 0.50 = 55%
        # self.set_holdings = 0.50
        # Enable automatic warm-up of indicators
        self.settings.automatic_indicator_warm_up = True

        # Create a symbol for the SPY ETF (DIA = Dow, QQQ = Nasdaq100, IWB, IWM and IWV for Russel1/2/3k)
        spy = Symbol.create('SPY', SecurityType.EQUITY, Market.USA)

        # Fetch parameters or use default values
        # seletcs 10 stocks out of the universe
        self.universe_size = self.get_parameter("universe-size", 10) # backtest optimization from 2 to 20 universe size gives and optimum of 10
        self._lookback = self.get_parameter("lookback", 17) # backtest optimization loockback period from 0 t 30 results in an optimum of 17

        # Debugging: Log parameter values
        self.debug(f"Initialized with universe_size: {self.universe_size}, lookback: {self._lookback}")

        # Add a universe of securities with hourly resolution
        self.universe_settings.resolution = Resolution.HOUR

        self._universe = self.add_universe(
            self.universe.etf(
                spy,
                universe_filter_func=lambda constituents: [
                    c.symbol for c in sorted(
                        [c for c in constituents if c.weight],
                        key=lambda c: c.weight
                    )[-self.universe_size:]
                ]
            )
        )

        # Schedule rebalancing on the first trading day of the month
        self.schedule.on(
            self.date_rules.month_start(spy),
            self.time_rules.after_market_open(spy, 31),
            self._rebalance
        )
    """
    def on_securities_changed(self, changes):
        # When securities are added to the universe, assign factors to them
        for security in changes.added_securities:
            security.factors = [
                MarketCapFactor(security),
                SortinoFactor(self, security.symbol, self._lookback)
            ]

            # Debugging: Log added securities and their factors
            self.debug(f"Added security: {security.Symbol}, factors: {[type(f).__name__ for f in security.factors]}")
    """
    def on_securities_changed(self, changes):
        # When securities are added to the universe, assign factors to them
        for security in changes.added_securities:
            security.factors = [
                MarketCapFactor(security),
                SortinoFactor(self, security.symbol, self._lookback),
                ROCFactor(self, security.symbol, self._lookback) # ROC factor added adds 20% mor PnL
                # Add CorrFactor if you define a reference symbol, e.g., SPY
                # CorrFactor(self, security.symbol, self.spy_symbol, self._lookback)
            ]
            self.debug(f"Added security: {security.Symbol}, factors: {[type(f).__name__ for f in security.factors]}")

    def _rebalance(self):
        # Initialize a DataFrame to store factor values
        """factors_df = pd.DataFrame()
        for symbol in self._universe.selected:
            # Collect the factor values for each security
            for i, factor in enumerate(self.securities[symbol].factors):
                factors_df.loc[symbol, i] = factor.value"""

            
        factors_df = pd.DataFrame()
        for symbol in self._universe.selected:
            for i, factor in enumerate(self.securities[symbol].factors):
                factor_val = factor.value
                if pd.isna(factor_val) or not isinstance(factor_val, (int, float)):
                    self.debug(f"Warning: Factor {type(factor).__name__} for {symbol} returned invalid value: {factor_val}. Skipping.")
                    factor_val = 0.0 # Or use an appropriate default/fill
                factors_df.loc[symbol, i] = factor_val
        
        if factors_df.empty:
            self.debug("Factor DataFrame is empty. No securities to process. Liquidating all positions.")
            self.liquidate()
            return
        
        # Handle cases where std might be zero 
        std_devs = factors_df.std()
        if (std_devs == 0).any():
            self.debug("Warning: One or more factor standard deviations are zero. This can happen if all factor values are the same.")
            # Add a small epsilon to avoid division by zero
            factor_zscores = (factors_df - factors_df.mean()) / (std_devs + 1e-9)
        else:
            factor_zscores = (factors_df - factors_df.mean()) / std_devs

        # Debugging: Log factor values
        self.debug(f"Factor values DataFrame:\n{factors_df}")

        # Standardize factor values (z-scores)
        factor_zscores = (factors_df - factors_df.mean()) / factors_df.std()
        self.debug(f"Factor Z-scores:\n{factor_zscores}")

        # Get the trailing return for the lookback period
        trailing_return = self.history(
            list(self._universe.selected), self._lookback, Resolution.DAILY
        ).close.unstack(0).pct_change(self._lookback - 1).iloc[-1]

        # Debugging: Log trailing returns
        self.debug(f"Trailing Returns:\n{trailing_return}")

        # Number of factors to optimize
        num_factors = factors_df.shape[1]

        # Perform optimization to find optimal factor weights
        factor_weights = optimize.minimize(
            lambda weights: -(np.dot(factor_zscores, weights) * trailing_return).sum(),
            x0=np.array([1.0 / num_factors] * num_factors),
            method='Nelder-Mead',
            bounds=Bounds([0] * num_factors, [1] * num_factors),
            options={'maxiter': 10}
        ).x

        # Debugging: Log optimized factor weights
        self.debug(f"Optimized Factor Weights:\n{factor_weights}")

        # Calculate portfolio weights based on factor weights and z-scores
        portfolio_weights = (factor_zscores * factor_weights).sum(axis=1)
        portfolio_weights = portfolio_weights[portfolio_weights > 0]

        if portfolio_weights.empty or portfolio_weights.sum() == 0:
            self.debug("No positive portfolio weights generated, or sum is zero. Liquidating all positions.")
            self.liquidate()
            return
        
        # Normalize portfolio weights and set holdings
        targets = []
        total_positive_weight = portfolio_weights.sum()
        for symbol, weight in portfolio_weights.items():
            targets.append(PortfolioTarget(symbol, weight / total_positive_weight))

        self.set_holdings(targets, True)

        # Debugging: Log portfolio weights
        self.debug(f"Portfolio Weights:\n{portfolio_weights}")

        # Normalize portfolio weights and set holdings
        self.set_holdings(
            [PortfolioTarget(symbol, weight / portfolio_weights.sum()) for symbol, weight in portfolio_weights.items()],
            True
        )

        # Debugging: Confirm rebalancing
        self.debug(f"Rebalanced portfolio with targets:\n{portfolio_weights}")

class MarketCapFactor:
    def __init__(self, security):
        self._security = security

    @property
    def value(self):
        return self._security.fundamentals.market_cap

class SortinoFactor:
    def __init__(self, algorithm, symbol, lookback):
        self._sortino = algorithm.sortino(symbol, lookback, resolution=Resolution.DAILY)

    @property
    def value(self):
        return self._sortino.current.value

class CorrFactor:
    def __init__(self, algorithm, symbol, reference, lookback):
        self._c = algorithm.c(symbol, reference, lookback, correlation_type=CorrelationType.Pearson, resolution=Resolution.DAILY)

    @property
    def value(self):
        return 1 - abs(self._c.current.value)

class ROCFactor:
    def __init__(self, algorithm, symbol, lookback):
        # Ensure enough history for ROC
        self._roc = algorithm.roc(symbol, lookback, resolution=Resolution.DAILY)
        # Warm up ROC indicator
        algorithm.warm_up_indicator(symbol, self._roc, Resolution.DAILY)

    @property
    def value(self):
        # Check if the indicator is ready
        if self._roc.is_ready:
            return self._roc.current.value
        return 0.0 # Return a default/safe value if not ready, or handle appropriately
